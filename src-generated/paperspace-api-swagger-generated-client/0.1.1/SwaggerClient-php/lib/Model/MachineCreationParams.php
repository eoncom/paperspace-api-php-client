<?php
/**
 * MachineCreationParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Paperspace
 *
 * Swagger representation of the Paperspace HTTP API
 *
 * OpenAPI spec version: 0.1.1
 * Contact: support@paperspace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MachineCreationParams Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MachineCreationParams implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MachineCreationParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'region' => 'string',
        'machine_type' => 'string',
        'size' => 'int',
        'billing_type' => 'string',
        'machine_name' => 'string',
        'template_id' => 'string',
        'network_id' => 'string',
        'team_id' => 'string',
        'user_id' => 'string',
        'email' => 'string',
        'password' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'notification_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'region' => null,
        'machine_type' => null,
        'size' => 'int32',
        'billing_type' => null,
        'machine_name' => null,
        'template_id' => null,
        'network_id' => null,
        'team_id' => null,
        'user_id' => null,
        'email' => null,
        'password' => null,
        'first_name' => null,
        'last_name' => null,
        'notification_email' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'region' => 'region',
        'machine_type' => 'machineType',
        'size' => 'size',
        'billing_type' => 'billingType',
        'machine_name' => 'machineName',
        'template_id' => 'templateId',
        'network_id' => 'networkId',
        'team_id' => 'teamId',
        'user_id' => 'userId',
        'email' => 'email',
        'password' => 'password',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'notification_email' => 'notificationEmail'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'region' => 'setRegion',
        'machine_type' => 'setMachineType',
        'size' => 'setSize',
        'billing_type' => 'setBillingType',
        'machine_name' => 'setMachineName',
        'template_id' => 'setTemplateId',
        'network_id' => 'setNetworkId',
        'team_id' => 'setTeamId',
        'user_id' => 'setUserId',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'notification_email' => 'setNotificationEmail'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'region' => 'getRegion',
        'machine_type' => 'getMachineType',
        'size' => 'getSize',
        'billing_type' => 'getBillingType',
        'machine_name' => 'getMachineName',
        'template_id' => 'getTemplateId',
        'network_id' => 'getNetworkId',
        'team_id' => 'getTeamId',
        'user_id' => 'getUserId',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'notification_email' => 'getNotificationEmail'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REGION_EAST_COAST__NY2 = 'East Coast (NY2)';
    const REGION_WEST_COAST__CA1 = 'West Coast (CA1)';
    const MACHINE_TYPE_AIR = 'Air';
    const MACHINE_TYPE_STANDARD = 'Standard';
    const MACHINE_TYPE_PRO = 'Pro';
    const MACHINE_TYPE_ADVANCED = 'Advanced';
    const MACHINE_TYPE_GPU = 'GPU+';
    const MACHINE_TYPE_P5000 = 'P5000';
    const MACHINE_TYPE_C1 = 'C1';
    const MACHINE_TYPE_C2 = 'C2';
    const MACHINE_TYPE_C3 = 'C3';
    const MACHINE_TYPE_C4 = 'C4';
    const MACHINE_TYPE_C5 = 'C5';
    const MACHINE_TYPE_C6 = 'C6';
    const MACHINE_TYPE_C7 = 'C7';
    const MACHINE_TYPE_C8 = 'C8';
    const MACHINE_TYPE_C9 = 'C9';
    const MACHINE_TYPE_C10 = 'C10';
    const BILLING_TYPE_HOURLY = 'hourly';
    const BILLING_TYPE_MONTHLY = 'monthly';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRegionAllowableValues()
    {
        return [
            self::REGION_EAST_COAST__NY2,
            self::REGION_WEST_COAST__CA1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMachineTypeAllowableValues()
    {
        return [
            self::MACHINE_TYPE_AIR,
            self::MACHINE_TYPE_STANDARD,
            self::MACHINE_TYPE_PRO,
            self::MACHINE_TYPE_ADVANCED,
            self::MACHINE_TYPE_GPU,
            self::MACHINE_TYPE_P5000,
            self::MACHINE_TYPE_C1,
            self::MACHINE_TYPE_C2,
            self::MACHINE_TYPE_C3,
            self::MACHINE_TYPE_C4,
            self::MACHINE_TYPE_C5,
            self::MACHINE_TYPE_C6,
            self::MACHINE_TYPE_C7,
            self::MACHINE_TYPE_C8,
            self::MACHINE_TYPE_C9,
            self::MACHINE_TYPE_C10,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingTypeAllowableValues()
    {
        return [
            self::BILLING_TYPE_HOURLY,
            self::BILLING_TYPE_MONTHLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['machine_type'] = isset($data['machine_type']) ? $data['machine_type'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['billing_type'] = isset($data['billing_type']) ? $data['billing_type'] : null;
        $this->container['machine_name'] = isset($data['machine_name']) ? $data['machine_name'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['notification_email'] = isset($data['notification_email']) ? $data['notification_email'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['region'] === null) {
            $invalid_properties[] = "'region' can't be null";
        }
        $allowed_values = $this->getRegionAllowableValues();
        if (!in_array($this->container['region'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'region', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['machine_type'] === null) {
            $invalid_properties[] = "'machine_type' can't be null";
        }
        $allowed_values = $this->getMachineTypeAllowableValues();
        if (!in_array($this->container['machine_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'machine_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['size'] === null) {
            $invalid_properties[] = "'size' can't be null";
        }
        if ($this->container['billing_type'] === null) {
            $invalid_properties[] = "'billing_type' can't be null";
        }
        $allowed_values = $this->getBillingTypeAllowableValues();
        if (!in_array($this->container['billing_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'billing_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['machine_name'] === null) {
            $invalid_properties[] = "'machine_name' can't be null";
        }
        if ($this->container['template_id'] === null) {
            $invalid_properties[] = "'template_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['region'] === null) {
            return false;
        }
        $allowed_values = $this->getRegionAllowableValues();
        if (!in_array($this->container['region'], $allowed_values)) {
            return false;
        }
        if ($this->container['machine_type'] === null) {
            return false;
        }
        $allowed_values = $this->getMachineTypeAllowableValues();
        if (!in_array($this->container['machine_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['size'] === null) {
            return false;
        }
        if ($this->container['billing_type'] === null) {
            return false;
        }
        $allowed_values = $this->getBillingTypeAllowableValues();
        if (!in_array($this->container['billing_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['machine_name'] === null) {
            return false;
        }
        if ($this->container['template_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     * @param string $region Name of the region
     * @return $this
     */
    public function setRegion($region)
    {
        $allowed_values = $this->getRegionAllowableValues();
        if (!in_array($region, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'region', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets machine_type
     * @return string
     */
    public function getMachineType()
    {
        return $this->container['machine_type'];
    }

    /**
     * Sets machine_type
     * @param string $machine_type
     * @return $this
     */
    public function setMachineType($machine_type)
    {
        $allowed_values = $this->getMachineTypeAllowableValues();
        if (!in_array($machine_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'machine_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['machine_type'] = $machine_type;

        return $this;
    }

    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param int $size Storage size for the machine in GB
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets billing_type
     * @return string
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     * @param string $billing_type Either 'monthly' or 'hourly' billing
     * @return $this
     */
    public function setBillingType($billing_type)
    {
        $allowed_values = $this->getBillingTypeAllowableValues();
        if (!in_array($billing_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets machine_name
     * @return string
     */
    public function getMachineName()
    {
        return $this->container['machine_name'];
    }

    /**
     * Sets machine_name
     * @param string $machine_name A memorable name for this machine
     * @return $this
     */
    public function setMachineName($machine_name)
    {
        $this->container['machine_name'] = $machine_name;

        return $this;
    }

    /**
     * Gets template_id
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     * @param string $template_id Template id of the template to use for creating this machine
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets network_id
     * @return string
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     * @param string $network_id If creating on a specific network, specify its id
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets team_id
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     * @param string $team_id If creating the machine for a team, specify the team id
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id If assigning to an existing user other than yourself, specify the user id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email If creating a new user for this machine, specify their email address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password If creating a new user, specify their password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name If creating a new user, specify their first name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name If creating a new user, specify their last name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets notification_email
     * @return string
     */
    public function getNotificationEmail()
    {
        return $this->container['notification_email'];
    }

    /**
     * Sets notification_email
     * @param string $notification_email Send a notification to this email address when complete
     * @return $this
     */
    public function setNotificationEmail($notification_email)
    {
        $this->container['notification_email'] = $notification_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


