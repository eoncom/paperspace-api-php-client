<?php
/**
 * MachinesApi
 * PHP version 5
 *
 * @category Class
 * @package  Gamingsolved\Paperspace\Api\Client\Version0_1_3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Paperspace REST API
 *
 * Inofficial Swagger representation of the [Paperspace REST API](https://paperspace.github.io/paperspace-node/), provided by the [GamingSolved](https://github.com/gamingsolved/paperspace-api-php-client) project.
 *
 * OpenAPI spec version: 0.1.3
 * Contact: support@paperspace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gamingsolved\Paperspace\Api\Client\Version0_1_3\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException;
use Gamingsolved\Paperspace\Api\Client\Version0_1_3\Configuration;
use Gamingsolved\Paperspace\Api\Client\Version0_1_3\HeaderSelector;
use Gamingsolved\Paperspace\Api\Client\Version0_1_3\ObjectSerializer;

/**
 * MachinesApi Class Doc Comment
 *
 * @category Class
 * @package  Gamingsolved\Paperspace\Api\Client\Version0_1_3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MachinesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createMachine
     *
     * Create and launch a new Paperspace virtual machine
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\CreateMachineParams $createMachineParams Machine creation parameters (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine
     */
    public function createMachine($createMachineParams)
    {
        list($response) = $this->createMachineWithHttpInfo($createMachineParams);
        return $response;
    }

    /**
     * Operation createMachineWithHttpInfo
     *
     * Create and launch a new Paperspace virtual machine
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\CreateMachineParams $createMachineParams Machine creation parameters (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMachineWithHttpInfo($createMachineParams)
    {
        $returnType = '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine';
        $request = $this->createMachineRequest($createMachineParams);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMachineAsync
     *
     * Create and launch a new Paperspace virtual machine
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\CreateMachineParams $createMachineParams Machine creation parameters (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMachineAsync($createMachineParams)
    {
        return $this->createMachineAsyncWithHttpInfo($createMachineParams)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createMachineAsyncWithHttpInfo
     *
     * Create and launch a new Paperspace virtual machine
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\CreateMachineParams $createMachineParams Machine creation parameters (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMachineAsyncWithHttpInfo($createMachineParams)
    {
        $returnType = '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine';
        $request = $this->createMachineRequest($createMachineParams);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createMachine'
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\CreateMachineParams $createMachineParams Machine creation parameters (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMachineRequest($createMachineParams)
    {
        // verify the required parameter 'createMachineParams' is set
        if ($createMachineParams === null) {
            throw new \InvalidArgumentException('Missing the required parameter $createMachineParams when calling createMachine');
        }

        $resourcePath = '/machines/createSingleMachinePublic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($createMachineParams)) {
            $_tempBody = $createMachineParams;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyMachine
     *
     * Destroy a machine
     *
     * @param string $machineId The id of the machine to destroy (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function destroyMachine($machineId)
    {
        $this->destroyMachineWithHttpInfo($machineId);
    }

    /**
     * Operation destroyMachineWithHttpInfo
     *
     * Destroy a machine
     *
     * @param string $machineId The id of the machine to destroy (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyMachineWithHttpInfo($machineId)
    {
        $returnType = '';
        $request = $this->destroyMachineRequest($machineId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation destroyMachineAsync
     *
     * Destroy a machine
     *
     * @param string $machineId The id of the machine to destroy (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyMachineAsync($machineId)
    {
        return $this->destroyMachineAsyncWithHttpInfo($machineId)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation destroyMachineAsyncWithHttpInfo
     *
     * Destroy a machine
     *
     * @param string $machineId The id of the machine to destroy (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyMachineAsyncWithHttpInfo($machineId)
    {
        $returnType = '';
        $request = $this->destroyMachineRequest($machineId);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'destroyMachine'
     *
     * @param string $machineId The id of the machine to destroy (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function destroyMachineRequest($machineId)
    {
        // verify the required parameter 'machineId' is set
        if ($machineId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $machineId when calling destroyMachine');
        }

        $resourcePath = '/machines/{machineId}/destroyMachine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($machineId !== null) {
            $resourcePath = str_replace('{' . 'machineId' . '}', ObjectSerializer::toPathValue($machineId), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMachines
     *
     * List information about all machines available
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\ListMachinesParams $listMachinesParams An optional filter object to limit the returned machine objects (optional)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]
     */
    public function listMachines($listMachinesParams = null)
    {
        list($response) = $this->listMachinesWithHttpInfo($listMachinesParams);
        return $response;
    }

    /**
     * Operation listMachinesWithHttpInfo
     *
     * List information about all machines available
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\ListMachinesParams $listMachinesParams An optional filter object to limit the returned machine objects (optional)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listMachinesWithHttpInfo($listMachinesParams = null)
    {
        $returnType = '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]';
        $request = $this->listMachinesRequest($listMachinesParams);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMachinesAsync
     *
     * List information about all machines available
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\ListMachinesParams $listMachinesParams An optional filter object to limit the returned machine objects (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMachinesAsync($listMachinesParams = null)
    {
        return $this->listMachinesAsyncWithHttpInfo($listMachinesParams)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation listMachinesAsyncWithHttpInfo
     *
     * List information about all machines available
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\ListMachinesParams $listMachinesParams An optional filter object to limit the returned machine objects (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMachinesAsyncWithHttpInfo($listMachinesParams = null)
    {
        $returnType = '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]';
        $request = $this->listMachinesRequest($listMachinesParams);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'listMachines'
     *
     * @param \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\ListMachinesParams $listMachinesParams An optional filter object to limit the returned machine objects (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listMachinesRequest($listMachinesParams = null)
    {

        $resourcePath = '/machines/getMachines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($listMachinesParams)) {
            $_tempBody = $listMachinesParams;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restartMachine
     *
     * Restart an individual machine
     *
     * @param string $machineId The id of the machine to restart (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restartMachine($machineId)
    {
        $this->restartMachineWithHttpInfo($machineId);
    }

    /**
     * Operation restartMachineWithHttpInfo
     *
     * Restart an individual machine
     *
     * @param string $machineId The id of the machine to restart (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restartMachineWithHttpInfo($machineId)
    {
        $returnType = '';
        $request = $this->restartMachineRequest($machineId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restartMachineAsync
     *
     * Restart an individual machine
     *
     * @param string $machineId The id of the machine to restart (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartMachineAsync($machineId)
    {
        return $this->restartMachineAsyncWithHttpInfo($machineId)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation restartMachineAsyncWithHttpInfo
     *
     * Restart an individual machine
     *
     * @param string $machineId The id of the machine to restart (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartMachineAsyncWithHttpInfo($machineId)
    {
        $returnType = '';
        $request = $this->restartMachineRequest($machineId);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'restartMachine'
     *
     * @param string $machineId The id of the machine to restart (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restartMachineRequest($machineId)
    {
        // verify the required parameter 'machineId' is set
        if ($machineId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $machineId when calling restartMachine');
        }

        $resourcePath = '/machines/{machineId}/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($machineId !== null) {
            $resourcePath = str_replace('{' . 'machineId' . '}', ObjectSerializer::toPathValue($machineId), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showMachine
     *
     * Show machine information
     *
     * @param string $machineId Id of the machine to show (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]
     */
    public function showMachine($machineId)
    {
        list($response) = $this->showMachineWithHttpInfo($machineId);
        return $response;
    }

    /**
     * Operation showMachineWithHttpInfo
     *
     * Show machine information
     *
     * @param string $machineId Id of the machine to show (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function showMachineWithHttpInfo($machineId)
    {
        $returnType = '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]';
        $request = $this->showMachineRequest($machineId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showMachineAsync
     *
     * Show machine information
     *
     * @param string $machineId Id of the machine to show (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showMachineAsync($machineId)
    {
        return $this->showMachineAsyncWithHttpInfo($machineId)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation showMachineAsyncWithHttpInfo
     *
     * Show machine information
     *
     * @param string $machineId Id of the machine to show (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showMachineAsyncWithHttpInfo($machineId)
    {
        $returnType = '\Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model\Machine[]';
        $request = $this->showMachineRequest($machineId);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'showMachine'
     *
     * @param string $machineId Id of the machine to show (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showMachineRequest($machineId)
    {
        // verify the required parameter 'machineId' is set
        if ($machineId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $machineId when calling showMachine');
        }

        $resourcePath = '/machines/getMachinePublic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($machineId !== null) {
            $queryParams['machineId'] = ObjectSerializer::toQueryValue($machineId);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopMachine
     *
     * Stop an individual machine
     *
     * @param string $machineId The id of the machine to shut down (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function stopMachine($machineId)
    {
        $this->stopMachineWithHttpInfo($machineId);
    }

    /**
     * Operation stopMachineWithHttpInfo
     *
     * Stop an individual machine
     *
     * @param string $machineId The id of the machine to shut down (required)
     * @throws \Gamingsolved\Paperspace\Api\Client\Version0_1_3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopMachineWithHttpInfo($machineId)
    {
        $returnType = '';
        $request = $this->stopMachineRequest($machineId);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation stopMachineAsync
     *
     * Stop an individual machine
     *
     * @param string $machineId The id of the machine to shut down (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopMachineAsync($machineId)
    {
        return $this->stopMachineAsyncWithHttpInfo($machineId)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation stopMachineAsyncWithHttpInfo
     *
     * Stop an individual machine
     *
     * @param string $machineId The id of the machine to shut down (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopMachineAsyncWithHttpInfo($machineId)
    {
        $returnType = '';
        $request = $this->stopMachineRequest($machineId);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'stopMachine'
     *
     * @param string $machineId The id of the machine to shut down (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopMachineRequest($machineId)
    {
        // verify the required parameter 'machineId' is set
        if ($machineId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $machineId when calling stopMachine');
        }

        $resourcePath = '/machines/{machineId}/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($machineId !== null) {
            $resourcePath = str_replace('{' . 'machineId' . '}', ObjectSerializer::toPathValue($machineId), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

}
