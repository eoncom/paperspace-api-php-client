<?php
/**
 * ListMachinesParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gamingsolved\Paperspace\Api\Client\Version0_1_3
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Paperspace REST API
 *
 * Inofficial Swagger representation of the [Paperspace REST API](https://paperspace.github.io/paperspace-node/), provided by the [GamingSolved](https://github.com/gamingsolved/paperspace-api-php-client) project.
 *
 * OpenAPI spec version: 0.1.3
 * Contact: support@paperspace.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gamingsolved\Paperspace\Api\Client\Version0_1_3\Model;

use \ArrayAccess;

/**
 * ListMachinesParams Class Doc Comment
 *
 * @category    Class
 * @package     Gamingsolved\Paperspace\Api\Client\Version0_1_3
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ListMachinesParams implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ListMachinesParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'machineId' => 'string',
        'name' => 'string',
        'os' => 'string',
        'ram' => 'string',
        'cpus' => 'int',
        'gpu' => 'string',
        'storageTotal' => 'string',
        'storageUsed' => 'string',
        'usageRate' => 'string',
        'shutdownTimeoutInHours' => 'int',
        'performAutoSnapshot' => 'bool',
        'autoSnapshotFrequency' => 'string',
        'autoSnapshotSaveCount' => 'int',
        'agentType' => 'string',
        'dtCreated' => 'string',
        'state' => 'string',
        'networkId' => 'string',
        'privateIpAddress' => 'string',
        'publicIpAddress' => 'string',
        'region' => 'string',
        'userId' => 'string',
        'teamId' => 'string',
        'scriptId' => 'string',
        'dtLastRun' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'machineId' => null,
        'name' => null,
        'os' => null,
        'ram' => null,
        'cpus' => 'int32',
        'gpu' => null,
        'storageTotal' => null,
        'storageUsed' => null,
        'usageRate' => null,
        'shutdownTimeoutInHours' => 'int32',
        'performAutoSnapshot' => null,
        'autoSnapshotFrequency' => null,
        'autoSnapshotSaveCount' => 'int32',
        'agentType' => null,
        'dtCreated' => null,
        'state' => null,
        'networkId' => null,
        'privateIpAddress' => null,
        'publicIpAddress' => null,
        'region' => null,
        'userId' => null,
        'teamId' => null,
        'scriptId' => null,
        'dtLastRun' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'machineId' => 'machineId',
        'name' => 'name',
        'os' => 'os',
        'ram' => 'ram',
        'cpus' => 'cpus',
        'gpu' => 'gpu',
        'storageTotal' => 'storageTotal',
        'storageUsed' => 'storageUsed',
        'usageRate' => 'usageRate',
        'shutdownTimeoutInHours' => 'shutdownTimeoutInHours',
        'performAutoSnapshot' => 'performAutoSnapshot',
        'autoSnapshotFrequency' => 'autoSnapshotFrequency',
        'autoSnapshotSaveCount' => 'autoSnapshotSaveCount',
        'agentType' => 'agentType',
        'dtCreated' => 'dtCreated',
        'state' => 'state',
        'networkId' => 'networkId',
        'privateIpAddress' => 'privateIpAddress',
        'publicIpAddress' => 'publicIpAddress',
        'region' => 'region',
        'userId' => 'userId',
        'teamId' => 'teamId',
        'scriptId' => 'scriptId',
        'dtLastRun' => 'dtLastRun'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'machineId' => 'setMachineId',
        'name' => 'setName',
        'os' => 'setOs',
        'ram' => 'setRam',
        'cpus' => 'setCpus',
        'gpu' => 'setGpu',
        'storageTotal' => 'setStorageTotal',
        'storageUsed' => 'setStorageUsed',
        'usageRate' => 'setUsageRate',
        'shutdownTimeoutInHours' => 'setShutdownTimeoutInHours',
        'performAutoSnapshot' => 'setPerformAutoSnapshot',
        'autoSnapshotFrequency' => 'setAutoSnapshotFrequency',
        'autoSnapshotSaveCount' => 'setAutoSnapshotSaveCount',
        'agentType' => 'setAgentType',
        'dtCreated' => 'setDtCreated',
        'state' => 'setState',
        'networkId' => 'setNetworkId',
        'privateIpAddress' => 'setPrivateIpAddress',
        'publicIpAddress' => 'setPublicIpAddress',
        'region' => 'setRegion',
        'userId' => 'setUserId',
        'teamId' => 'setTeamId',
        'scriptId' => 'setScriptId',
        'dtLastRun' => 'setDtLastRun'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'machineId' => 'getMachineId',
        'name' => 'getName',
        'os' => 'getOs',
        'ram' => 'getRam',
        'cpus' => 'getCpus',
        'gpu' => 'getGpu',
        'storageTotal' => 'getStorageTotal',
        'storageUsed' => 'getStorageUsed',
        'usageRate' => 'getUsageRate',
        'shutdownTimeoutInHours' => 'getShutdownTimeoutInHours',
        'performAutoSnapshot' => 'getPerformAutoSnapshot',
        'autoSnapshotFrequency' => 'getAutoSnapshotFrequency',
        'autoSnapshotSaveCount' => 'getAutoSnapshotSaveCount',
        'agentType' => 'getAgentType',
        'dtCreated' => 'getDtCreated',
        'state' => 'getState',
        'networkId' => 'getNetworkId',
        'privateIpAddress' => 'getPrivateIpAddress',
        'publicIpAddress' => 'getPublicIpAddress',
        'region' => 'getRegion',
        'userId' => 'getUserId',
        'teamId' => 'getTeamId',
        'scriptId' => 'getScriptId',
        'dtLastRun' => 'getDtLastRun'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['machineId'] = isset($data['machineId']) ? $data['machineId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['ram'] = isset($data['ram']) ? $data['ram'] : null;
        $this->container['cpus'] = isset($data['cpus']) ? $data['cpus'] : null;
        $this->container['gpu'] = isset($data['gpu']) ? $data['gpu'] : null;
        $this->container['storageTotal'] = isset($data['storageTotal']) ? $data['storageTotal'] : null;
        $this->container['storageUsed'] = isset($data['storageUsed']) ? $data['storageUsed'] : null;
        $this->container['usageRate'] = isset($data['usageRate']) ? $data['usageRate'] : null;
        $this->container['shutdownTimeoutInHours'] = isset($data['shutdownTimeoutInHours']) ? $data['shutdownTimeoutInHours'] : null;
        $this->container['performAutoSnapshot'] = isset($data['performAutoSnapshot']) ? $data['performAutoSnapshot'] : null;
        $this->container['autoSnapshotFrequency'] = isset($data['autoSnapshotFrequency']) ? $data['autoSnapshotFrequency'] : null;
        $this->container['autoSnapshotSaveCount'] = isset($data['autoSnapshotSaveCount']) ? $data['autoSnapshotSaveCount'] : null;
        $this->container['agentType'] = isset($data['agentType']) ? $data['agentType'] : null;
        $this->container['dtCreated'] = isset($data['dtCreated']) ? $data['dtCreated'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['networkId'] = isset($data['networkId']) ? $data['networkId'] : null;
        $this->container['privateIpAddress'] = isset($data['privateIpAddress']) ? $data['privateIpAddress'] : null;
        $this->container['publicIpAddress'] = isset($data['publicIpAddress']) ? $data['publicIpAddress'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['teamId'] = isset($data['teamId']) ? $data['teamId'] : null;
        $this->container['scriptId'] = isset($data['scriptId']) ? $data['scriptId'] : null;
        $this->container['dtLastRun'] = isset($data['dtLastRun']) ? $data['dtLastRun'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets machineId
     * @return string
     */
    public function getMachineId()
    {
        return $this->container['machineId'];
    }

    /**
     * Sets machineId
     * @param string $machineId Optional machine id to match on
     * @return $this
     */
    public function setMachineId($machineId)
    {
        $this->container['machineId'] = $machineId;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Optional name to match on
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets os
     * @return string
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     * @param string $os Optional os to match on
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets ram
     * @return string
     */
    public function getRam()
    {
        return $this->container['ram'];
    }

    /**
     * Sets ram
     * @param string $ram Optional ram value to match on
     * @return $this
     */
    public function setRam($ram)
    {
        $this->container['ram'] = $ram;

        return $this;
    }

    /**
     * Gets cpus
     * @return int
     */
    public function getCpus()
    {
        return $this->container['cpus'];
    }

    /**
     * Sets cpus
     * @param int $cpus Optional cpu count to match on
     * @return $this
     */
    public function setCpus($cpus)
    {
        $this->container['cpus'] = $cpus;

        return $this;
    }

    /**
     * Gets gpu
     * @return string
     */
    public function getGpu()
    {
        return $this->container['gpu'];
    }

    /**
     * Sets gpu
     * @param string $gpu Optional gpu to match on
     * @return $this
     */
    public function setGpu($gpu)
    {
        $this->container['gpu'] = $gpu;

        return $this;
    }

    /**
     * Gets storageTotal
     * @return string
     */
    public function getStorageTotal()
    {
        return $this->container['storageTotal'];
    }

    /**
     * Sets storageTotal
     * @param string $storageTotal Optional storageTotal value to match on
     * @return $this
     */
    public function setStorageTotal($storageTotal)
    {
        $this->container['storageTotal'] = $storageTotal;

        return $this;
    }

    /**
     * Gets storageUsed
     * @return string
     */
    public function getStorageUsed()
    {
        return $this->container['storageUsed'];
    }

    /**
     * Sets storageUsed
     * @param string $storageUsed Optional storageUsed value to match on
     * @return $this
     */
    public function setStorageUsed($storageUsed)
    {
        $this->container['storageUsed'] = $storageUsed;

        return $this;
    }

    /**
     * Gets usageRate
     * @return string
     */
    public function getUsageRate()
    {
        return $this->container['usageRate'];
    }

    /**
     * Sets usageRate
     * @param string $usageRate Optional usageRate value to match on
     * @return $this
     */
    public function setUsageRate($usageRate)
    {
        $this->container['usageRate'] = $usageRate;

        return $this;
    }

    /**
     * Gets shutdownTimeoutInHours
     * @return int
     */
    public function getShutdownTimeoutInHours()
    {
        return $this->container['shutdownTimeoutInHours'];
    }

    /**
     * Sets shutdownTimeoutInHours
     * @param int $shutdownTimeoutInHours Optional shutdownTimeoutInHours value to match on
     * @return $this
     */
    public function setShutdownTimeoutInHours($shutdownTimeoutInHours)
    {
        $this->container['shutdownTimeoutInHours'] = $shutdownTimeoutInHours;

        return $this;
    }

    /**
     * Gets performAutoSnapshot
     * @return bool
     */
    public function getPerformAutoSnapshot()
    {
        return $this->container['performAutoSnapshot'];
    }

    /**
     * Sets performAutoSnapshot
     * @param bool $performAutoSnapshot Optional performAutoSnapshot value to match on, either true or false
     * @return $this
     */
    public function setPerformAutoSnapshot($performAutoSnapshot)
    {
        $this->container['performAutoSnapshot'] = $performAutoSnapshot;

        return $this;
    }

    /**
     * Gets autoSnapshotFrequency
     * @return string
     */
    public function getAutoSnapshotFrequency()
    {
        return $this->container['autoSnapshotFrequency'];
    }

    /**
     * Sets autoSnapshotFrequency
     * @param string $autoSnapshotFrequency Optional autoSnapshotFrequency value to match on
     * @return $this
     */
    public function setAutoSnapshotFrequency($autoSnapshotFrequency)
    {
        $this->container['autoSnapshotFrequency'] = $autoSnapshotFrequency;

        return $this;
    }

    /**
     * Gets autoSnapshotSaveCount
     * @return int
     */
    public function getAutoSnapshotSaveCount()
    {
        return $this->container['autoSnapshotSaveCount'];
    }

    /**
     * Sets autoSnapshotSaveCount
     * @param int $autoSnapshotSaveCount Optional autoSnapshotSaveCount value to match on
     * @return $this
     */
    public function setAutoSnapshotSaveCount($autoSnapshotSaveCount)
    {
        $this->container['autoSnapshotSaveCount'] = $autoSnapshotSaveCount;

        return $this;
    }

    /**
     * Gets agentType
     * @return string
     */
    public function getAgentType()
    {
        return $this->container['agentType'];
    }

    /**
     * Sets agentType
     * @param string $agentType Optional agentType value to match on
     * @return $this
     */
    public function setAgentType($agentType)
    {
        $this->container['agentType'] = $agentType;

        return $this;
    }

    /**
     * Gets dtCreated
     * @return string
     */
    public function getDtCreated()
    {
        return $this->container['dtCreated'];
    }

    /**
     * Sets dtCreated
     * @param string $dtCreated Optional datatime value to match on
     * @return $this
     */
    public function setDtCreated($dtCreated)
    {
        $this->container['dtCreated'] = $dtCreated;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state Optional state value to match on
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets networkId
     * @return string
     */
    public function getNetworkId()
    {
        return $this->container['networkId'];
    }

    /**
     * Sets networkId
     * @param string $networkId Optional networkId value to match on
     * @return $this
     */
    public function setNetworkId($networkId)
    {
        $this->container['networkId'] = $networkId;

        return $this;
    }

    /**
     * Gets privateIpAddress
     * @return string
     */
    public function getPrivateIpAddress()
    {
        return $this->container['privateIpAddress'];
    }

    /**
     * Sets privateIpAddress
     * @param string $privateIpAddress Optional privateIpAddress value to match on
     * @return $this
     */
    public function setPrivateIpAddress($privateIpAddress)
    {
        $this->container['privateIpAddress'] = $privateIpAddress;

        return $this;
    }

    /**
     * Gets publicIpAddress
     * @return string
     */
    public function getPublicIpAddress()
    {
        return $this->container['publicIpAddress'];
    }

    /**
     * Sets publicIpAddress
     * @param string $publicIpAddress Optional publicIpAddress value to match on
     * @return $this
     */
    public function setPublicIpAddress($publicIpAddress)
    {
        $this->container['publicIpAddress'] = $publicIpAddress;

        return $this;
    }

    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     * @param string $region Optional region value to match on
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets userId
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     * @param string $userId Optional userId value to match on
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets teamId
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['teamId'];
    }

    /**
     * Sets teamId
     * @param string $teamId Optional teamId value to match on
     * @return $this
     */
    public function setTeamId($teamId)
    {
        $this->container['teamId'] = $teamId;

        return $this;
    }

    /**
     * Gets scriptId
     * @return string
     */
    public function getScriptId()
    {
        return $this->container['scriptId'];
    }

    /**
     * Sets scriptId
     * @param string $scriptId Optional scriptId value to match on
     * @return $this
     */
    public function setScriptId($scriptId)
    {
        $this->container['scriptId'] = $scriptId;

        return $this;
    }

    /**
     * Gets dtLastRun
     * @return string
     */
    public function getDtLastRun()
    {
        return $this->container['dtLastRun'];
    }

    /**
     * Sets dtLastRun
     * @param string $dtLastRun Optional script datatime last run value to match on
     * @return $this
     */
    public function setDtLastRun($dtLastRun)
    {
        $this->container['dtLastRun'] = $dtLastRun;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Gamingsolved\Paperspace\Api\Client\Version0_1_3\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Gamingsolved\Paperspace\Api\Client\Version0_1_3\ObjectSerializer::sanitizeForSerialization($this));
    }
}


